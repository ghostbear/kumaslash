import com.diffplug.gradle.spotless.SpotlessExtension
import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import com.github.spotbugs.snom.SpotBugsExtension

plugins {
    id 'org.springframework.boot' version '3.2.0' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'com.diffplug.spotless' version '6.23.3' apply false
    id 'com.github.spotbugs' version "6.0.4" apply false
}

allprojects {
    apply plugin: 'com.diffplug.spotless'

    extensions.configure(SpotlessExtension) { spotless ->
        spotless.format 'misc', {
            target '*.gradle', '.gitattributes', '.gitignore'
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
    }
}

subprojects {
    group = 'me.ghostbear'
    version = '2023.1224.0-SNAPSHOT'

    project.pluginManager.withPlugin("java") {
        project.pluginManager.apply('com.github.spotbugs')
        extensions.configure(SpotBugsExtension) {spotbugs ->
            spotbugs.effort = Effort.MAX
            spotbugs.reportLevel.set(Confidence.valueOf("HIGH"))
        }
        extensions.configure(SpotlessExtension) { spotless ->
            spotless.java {
                importOrder()
                removeUnusedImports()
                palantirJavaFormat().style("AOSP")

                formatAnnotations()
                indentWithTabs()
                licenseHeader("""
                /*
                 * Copyright (C) 2023 ghostbear
                 *
                 * This Source Code Form is subject to the terms of the Mozilla Public
                 * License, v. 2.0. If a copy of the MPL was not distributed with this
                 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
                 */
                """.stripIndent().trim())
            }
            spotless.json {
                target 'src/**/*.json'
                jackson()
            }
            spotless.yaml {
                target 'src/**/*.yaml', 'src/**/*.yml'
                jackson()
            }
        }

        sourceCompatibility = JavaVersion.VERSION_21.toString()

        extensions.configure(JavaPluginExtension.class) { javaPluginExtension ->
            javaPluginExtension.toolchain {
                languageVersion = JavaLanguageVersion.of(21)
                vendor = JvmVendorSpec.AZUL
                implementation = JvmImplementation.VENDOR_SPECIFIC
            }
        }
    }
}

tasks.register("kumaslashBuildImage", Exec) {
    group = 'docker'
    commandLine 'docker', 'build', '--tag=kumaslash', '-f', 'Dockerfile', '.'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("kumaslashAniListBuildImage", Exec) {
    group = 'docker'
    commandLine 'docker', 'build', '--tag=kumaslash-anilist', '-f', 'Dockerfile.anilist', '.'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}
